package mbedApp.mqtt;

import mbedApp.devices.Light;
import mbedApp.ProjectLogger;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Random;

import org.eclipse.paho.client.mqttv3.*;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;

/**
 * MessageClient
 *
 * @author josephling
 * @version 1.0 10/02/2017
 */
public class MessageClient {

    private MqttConfigReader config;
    private MqttClient client;
    private String clientTopic;
    /**
     * Initialise a new MessageClient by connecting to the broker and setting up required variables.
     * Note: This will exit the whole program if a connection cannot be made to the broker.
     */
    public MessageClient(ClientType clientType)  {
        // Get our configuration options
        config = new MqttConfigReader();
        clientTopic = config.getTopic() + "/" + clientType + "/";
        MemoryPersistence memoryPersistence = new MemoryPersistence();
        try {
            ProjectLogger.Log("["+clientType+"] Qos var: " + config.getQos());

            // Set up our MQTT client
            client = new MqttClient(config.getBroker(), config.getClientId(), memoryPersistence);
            MqttConnectOptions clientConnectionOptions = new MqttConnectOptions();
            clientConnectionOptions.setCleanSession(true);

            // Actually connect
            client.connect(clientConnectionOptions);

        } catch(MqttException exception) {
            ProjectLogger.Log("["+clientTopic+"] Exception encountered when trying to connect to broker");
            exception.printStackTrace();
            System.exit(0);
        }
        ProjectLogger.Log("["+clientTopic+"] connected to MQTT successfully");
    }

    /**
     * Subscribes to a topic and then applies to listener to the topic.
     * @param topic string added to config.getTopic();
     * @param listener IMqqtMessageListener
     */
    public void subscribe(String topic, IMqttMessageListener listener){
        try {
            client.subscribe(clientTopic+topic, config.getQos(), listener);
        } catch (MqttException e) {
            e.printStackTrace();
        }
    }


    public void parse(String msg, String topic, InterfaceAdvMsg listener){
        // {name:state=true,other=1}
        String name         = null;
        String[] args       = null;
        String [] values    = null;
        msg = msg.replaceAll("\\s+","").replaceAll("\n", "");
        if (msg.charAt(0) == '{'){
            if (msg.charAt(msg.length()-1) == '}'){
                msg = msg.replaceAll("}","").replaceAll("\\{", "");
                System.out.println("really bad programming here!");
//                if (msg.split(",=").length > 1){
//                    for (String s : msg.split(",=")) {
//                        System.out.println(s);
//                    }
//                }else{
//                    System.out.println("Warning no params in: " + msg);
//                }

                listener.getMsg(topic, msg.split(":")[0], args, values);
                System.out.println("parsed successfully: " + msg);
            }else{
                System.err.println("Syntax error: no '}' found at the end of " + msg);
            }
        }else{
            System.err.println("Syntax error: no '{' found at the start of " + msg);
        }
    }


    /**
     * Subscribes to a topic and then applies to listener to the topic.
     * @param topic string added to config.getTopic();
     * @param listener IMqqtMessageListener
     */
    public void advanceSubscribe(String topic, InterfaceAdvMsg listener){
        try {
            client.subscribe(clientTopic+topic,
                    config.getQos(),
                    (String msgTopic, MqttMessage message)-> {
                        // do fancy stuff
                        this.parse(new String(message.getPayload()), topic, listener);
                    }
                    );
        } catch (MqttException e) {
            e.printStackTrace();
        }
    }


    /**
     * Send a message to the MQTT broker (and therefore all connected clients on the same topic)
     */
    public void send(String content) {
        try {
            client.publish(clientTopic, content.getBytes(), 0, false);
        } catch(MqttException exception) {
            ProjectLogger.Log("["+clientTopic+"] Exception encountered when trying to send message");
            exception.printStackTrace();
        }
    }

    /**
     * Send a message to the MQTT broker (and therefore all connected clients on the same topic)
     */
    public void send(String content, String topic) {
        ProjectLogger.Log("sending: " + clientTopic+topic + " msg: " + content);
        try {
            client.publish(clientTopic+topic, content.getBytes(), 0, false);
        } catch(MqttException exception) {
            ProjectLogger.Log("["+clientTopic+"] Exception encountered when trying to send message");
            exception.printStackTrace();
        }
    }

    /**
     * Disconnect from the broker.
     */
    public void disconnect() {
        ProjectLogger.Log("["+clientTopic+"] disconnecting Mqtt connection");
        try {
            client.disconnect();
        } catch(MqttException exception) {
            ProjectLogger.Log("["+clientTopic+"] Exception encountered when trying to disconnect");
            exception.printStackTrace();
        }
    }

}


package mbedApp.mqtt;

/**
 * InterfaceAdvMsg does.............
 *
 * @author josephling
 * @version 1.0 13/02/2017
 */
public interface InterfaceAdvMsg {
    /**
     *
     * @param topic
     * @param name name of the cmd
     * @param args name to go with the arg
     * @param values value of the name
     */
    void getMsg (String topic, String name, String[]args, String[] values);
}


messageClient = new MessageClient(ClientType.MBED);
        messageClient.advanceSubscribe("cat", (String topic, String name, String[]args, String[] values)->{
            System.out.println("reached here!");
            for (int i = 0; i < args.length; i++) {
                System.out.println(args[i]);
            }
            System.out.println(name + args.length + values.length);
        });
        messageClient.send("testing all the things}", "cat");
        messageClient.send("{testing all the things", "cat");
        messageClient.send("{name}", "cat");
        messageClient.send("{name:}", "cat");
        messageClient.send("{name:arg1}", "cat");
        messageClient.send("{name:arg1=va1}", "cat");